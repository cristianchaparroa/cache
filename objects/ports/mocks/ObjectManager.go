// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	objects "cache/objects"

	mock "github.com/stretchr/testify/mock"
)

// ObjectManager is an autogenerated mock type for the ObjectManager type
type ObjectManager struct {
	mock.Mock
}

// Delete provides a mock function with given fields: key
func (_m *ObjectManager) Delete(key string) error {
	ret := _m.Called(key)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByKey provides a mock function with given fields: key
func (_m *ObjectManager) GetByKey(key string) (*objects.Object, error) {
	ret := _m.Called(key)

	var r0 *objects.Object
	if rf, ok := ret.Get(0).(func(string) *objects.Object); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objects.Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: key, o
func (_m *ObjectManager) Save(key string, o *objects.Object) (*objects.Object, error) {
	ret := _m.Called(key, o)

	var r0 *objects.Object
	if rf, ok := ret.Get(0).(func(string, *objects.Object) *objects.Object); ok {
		r0 = rf(key, o)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objects.Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *objects.Object) error); ok {
		r1 = rf(key, o)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
