// Code generated by mockery v2.6.0. DO NOT EDIT.

package mocks

import (
	objects "cache/objects"

	mock "github.com/stretchr/testify/mock"
)

// CacheManager is an autogenerated mock type for the CacheManager type
type CacheManager struct {
	mock.Mock
}

// Add provides a mock function with given fields: key, o
func (_m *CacheManager) Add(key string, o *objects.Object) bool {
	ret := _m.Called(key, o)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, *objects.Object) bool); ok {
		r0 = rf(key, o)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Delete provides a mock function with given fields: key
func (_m *CacheManager) Delete(key string) (*objects.Object, error) {
	ret := _m.Called(key)

	var r0 *objects.Object
	if rf, ok := ret.Get(0).(func(string) *objects.Object); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objects.Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: key
func (_m *CacheManager) Get(key string) (*objects.Object, error) {
	ret := _m.Called(key)

	var r0 *objects.Object
	if rf, ok := ret.Get(0).(func(string) *objects.Object); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objects.Object)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetType provides a mock function with given fields:
func (_m *CacheManager) GetType() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Update provides a mock function with given fields: key, o
func (_m *CacheManager) Update(key string, o *objects.Object) bool {
	ret := _m.Called(key, o)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, *objects.Object) bool); ok {
		r0 = rf(key, o)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
